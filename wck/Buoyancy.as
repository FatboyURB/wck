package wck {		import Box2DAS.*;	import Box2DAS.Collision.*;	import Box2DAS.Collision.Shapes.*;	import Box2DAS.Controllers.*;	import Box2DAS.Common.*;	import Box2DAS.Dynamics.*;	import Box2DAS.Dynamics.Contacts.*;	import Box2DAS.Dynamics.Joints.*;	import cmodule.Box2D.*;	import wck.*;	import misc.*;	import flash.utils.*;	import flash.events.*;	import flash.display.*;	import flash.text.*;	import flash.geom.*;	import flash.ui.*;		/**	 * 	 */	public class Buoyancy extends BodyShape {				[Inspectable(defaultValue=1.5)]		public var liquidDensity:Number = 1.5;				[Inspectable(defaultValue=5)]		public var liquidLinearDrag:Number = 5;				[Inspectable(defaultValue=1)]		public var liquidAngularDrag:Number = 1;				[Inspectable(defaultValue=true)]		public var liquidUseDensity:Boolean = true;				public var c:b2Controller;		public var be:b2BuoyancyEffect;				public override function create():void {			isSensor = true;			mouseEnabled = false;			reportBeginContact = true;			reportEndContact = true;			super.create();			be = new b2BuoyancyEffect();			be.density = liquidDensity;			be.linearDrag = liquidLinearDrag;			be.angularDrag = liquidAngularDrag;			be.useDensity = liquidUseDensity;						c = new b2Controller(world.b2world, be, false);			listenWhileVisible(this, ContactEvent.BEGIN_CONTACT, handleBeginContact);			listenWhileVisible(this, ContactEvent.END_CONTACT, handleEndContact);			listenWhileVisible(world, StepEvent.STEP, handleTimeStep, false, 1);		}				public function handleBeginContact(e:ContactEvent):void {			c.AddBody(e.other.m_body);		}				public function handleEndContact(e:ContactEvent):void {			c.RemoveBody(e.other.m_body);		}				public override function destroy():void {			c.destroy();		}				public function handleTimeStep(e):void {			var v1:V2 = V2.fromP(Util.localizePoint(world, this)).divideN(world.scale);			var v2:V2 = V2.fromP(Util.localizePoint(world, this, new Point(0, Util.bounds(this).top))).divideN(world.scale);			be.normal = V2.subtract(v2, v1).normalize();			be.offset = v2.dot(be.normal);			be.velocity = b2body.m_linearVelocity.v2;		}	}}