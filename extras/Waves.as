package extras {		import Box2DAS.*;	import Box2DAS.Collision.*;	import Box2DAS.Collision.Shapes.*;	import Box2DAS.Common.*;	import Box2DAS.Dynamics.*;	import Box2DAS.Dynamics.Contacts.*;	import Box2DAS.Dynamics.Joints.*;	import wck.*;	import shapes.*;	import misc.*;	import extras.*;	import flash.utils.*;	import flash.events.*;	import flash.display.*;	import flash.text.*;	import flash.geom.*;		public class Waves {				public var waves:Vector.<Wave>;		public var points:Vector.<Number>;		public var numLines:int;		public var numWaves:int;		public var width:Number;		public var height:Number;		public var lineWidth:Number;				public function Waves(w:Number, h:Number, nl:int) {			width = w;			height = h;			waves = new Vector.<Wave>();			numWaves = 0;			numLines = nl;			lineWidth = width / numLines;			points = new Vector.<Number>(numLines + 1, true);			for(var i:int = 0; i <= numLines; ++i) {				points[i] = 0;			}		}				public function addWave(w:Wave):void {			w.init();			waves.push(w);			numWaves++;		}				public function splash(pos:Number, a:Number = 30, hw:Number = 100, v:Number = 3):void {			var w1:Wave = new Wave();			var w2:Wave = new Wave();			w1.amplitude = w2.amplitude = a;			w1.left = w2.left = pos - hw;			w1.right = w2.right = pos + hw;			w1.velocity = v;			w2.velocity = -v;			addWave(w1);			addWave(w2);		}				public function disturb(a:Number = 10, f:Number = 70, i1:Number = 3, i2:Number = -4):void {			var w1:Wave = new Wave();			var w2:Wave = new Wave();			w1.right = w2.right = width;			w1.amplitude = w2.amplitude = a;			w1.frequency = w2.frequency = f;			w1.increment = i1;			w2.increment = -i2;			w1.decayFunc = w2.decayFunc = null;			addWave(w1);			addWave(w2);		}				public function step():void {			var w:Wave;			for(var i:int = 0; i < numWaves; ++i) {				w = waves[i];				w.step();				var done:Boolean = w.decayFunc != null && (w.currentStep >= w.totalSteps);				var outBounds:Boolean = (w.right <= 0 && w.velocity <= 0) || (w.left >= width && w.velocity >= 0);				if(done || outBounds) {					waves.splice(i, 1);					numWaves--;					i--;				}			}			for(var i:int = 0; i <= numLines; ++i) {				points[i] = valueAt(i * lineWidth);			}		}				public function valueAt(pos:Number):Number {			var y:Number = 0;			for(var i:int = 0; i < numWaves; ++i) {				y += waves[i].valueAt(pos);			}			return y;		}				public function stroke():GraphicsPath {			var gp:GraphicsPath = new GraphicsPath();			gp.moveTo(0, points[0]);			for(var i = 1; i < numLines; ++i) {				gp.lineTo(lineWidth * i, points[i]);			}			gp.lineTo(width, height);			gp.lineTo(0, height);			gp.lineTo(0, points[0]);			return gp;		}			}	}