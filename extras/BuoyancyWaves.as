package extras {		import Box2DAS.*;	import Box2DAS.Collision.*;	import Box2DAS.Collision.Shapes.*;	import Box2DAS.Common.*;	import Box2DAS.Dynamics.*;	import Box2DAS.Dynamics.Contacts.*;	import Box2DAS.Dynamics.Joints.*;	import cmodule.Box2D.*;	import wck.*;	import shapes.*;	import misc.*;	import extras.*;	import flash.utils.*;	import flash.events.*;	import flash.display.*;	import flash.text.*;	import flash.geom.*;	import fl.transitions.*;	import fl.transitions.easing.*;	/**	 * 	 */	public class BuoyancyWaves extends Buoyancy {				public var water:Waves;		public var waterShape:Shape;				public override function shapes():void {			box();		}				public override function handleBeginContact(e:ContactEvent):void {			contactWave(e);			super.handleBeginContact(e);		}				public override function handleEndContact(e:ContactEvent):void {			contactWave(e);			super.handleEndContact(e);		}				public function contactWave(e:ContactEvent):void {			e.contact.Evaluate();			var wm:b2WorldManifold = e.getWorldManifold();			for(var i:int = 0; i < wm.points.length; ++i) {				var v:V2 = wm.points[i].clone().multiplyN(world.scale);				var p:Point = Util.localizePoint(this, world, v.toP());				water.splash(p.x + (water.width / 2));			}		}				public override function create():void {			var we:WavesEffect = new WavesEffect();			we.bs = this;			be = we;			super.create();			graphics.clear();			var b:Rectangle = Util.bounds(this);			water = new Waves(b.width, b.height, b.width / 10);			we.waves = water;			waterShape = new Shape();			addChild(waterShape);			waterShape.x = -b.width / 2;			waterShape.y = -b.height / 2;			water.disturb();		}				public override function handleTimeStep(e:StepEvent):void {			var b = Util.bounds(this);			/*var we:WavesEffect = (be as WavesEffect);			we.surface = we.normal.clone().cw90();			we.surfaceOffset = V2.fromP(Util.localizePoint(world, this, new Point(b.left, b.top))).divideN(world.scale).dot(we.surface); */			var g:Graphics = waterShape.graphics;			super.handleTimeStep(e);			water.step();			var gp:GraphicsPath = water.stroke();			g.clear();			g.lineStyle(1, 0x1693a5);			var m:Matrix = new Matrix();			m.createGradientBox(b.width, b.height, Math.PI / 2, -b.width / 2, -b.height / 2);			g.beginGradientFill(GradientType.LINEAR, [0xc7ede8, 0x1693a5], [.6, .8], [0, 255], m);			g.drawGraphicsData(Vector.<IGraphicsData>([gp]));		}			}}