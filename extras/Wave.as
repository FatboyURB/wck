package extras {		import Box2DAS.*;	import Box2DAS.Collision.*;	import Box2DAS.Collision.Shapes.*;	import Box2DAS.Common.*;	import Box2DAS.Dynamics.*;	import Box2DAS.Dynamics.Contacts.*;	import Box2DAS.Dynamics.Joints.*;	import wck.*;	import shapes.*;	import misc.*;	import extras.*;	import flash.utils.*;	import flash.events.*;	import flash.display.*;	import flash.text.*;	import flash.geom.*;		public class Wave {				/// The wave function.		public var waveFunc:Function;				/// Frequency / density of the wave.		public var frequency:Number = 20;				/// Current amplitude of the wave.		public var amplitude:Number = 30;				/// Starting amplitude of the wave.		public var startAmplitude:Number = 100;				/// The current number of steps since the first step.		public var currentStep:int = 0;				/// Remove the wave at this step (if decayFunc is present).		public var totalSteps:int = 90;				/// Offset the position value fed into the wave function.		public var offset:Number = 0;				/// Amount to increment offset each step (the velocity of the wave within it's boundaries).		public var increment:Number = 0;				/// The decay tween function (optional).		public var decayFunc:Function;				/// The clamp function use to taper off the wave at it's boundaries (optional).		public var clampFunc:Function;				/// Amount to move the wave boundaries each step.		public var velocity:Number = 0;				/// The left boundary of the wave.		public var left:Number = 0;				/// The right boundary of the wave.		public var right:Number = 1000;				/// Half the width of the full wave effect.		public var halfWidth:Number;				/// Middle of the wave effect.		public var middle:Number;				/// Initialize function properties.		public function Wave():void {			waveFunc = Math.sin;			decayFunc = Util.expoEaseOut;			clampFunc = Util.linearEase;		}				/// Store the initial amplitude of the wave.		public function init():void {			startAmplitude = amplitude;		}				/// Get the amplitude of the wave at a specific point.		public function valueAt(position:Number):Number {			if(position < left || position > right) {				return 0;			}			var v:Number = waveFunc((position - left + offset) / frequency) * amplitude;			if(clampFunc != null) {				return clampFunc(Math.abs(position - middle), v, -v, halfWidth);			}			return v;		}				public function step():void {			if(decayFunc != null) {				amplitude = decayFunc(currentStep, startAmplitude, -startAmplitude, totalSteps);								currentStep++;			}			offset += increment;			left += velocity;			right += velocity;			halfWidth = (right - left) / 2;			middle = left + halfWidth;		}	}}